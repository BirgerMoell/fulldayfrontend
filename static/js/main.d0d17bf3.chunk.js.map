{"version":3,"sources":["Chat.js","utils.js","Spam.js","App.js","serviceWorker.js","index.js"],"names":["Chat","url","width","height","id","className","display","position","postJson","body","a","fetch","method","headers","JSON","stringify","response","ok","Error","status","statusText","json","alert","Spam","useState","spam","setSpam","text","setText","checkForSpam","console","log","value","onChange","e","target","onplaceholder","onClick","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAeeA,EAZF,WACX,OACE,kBAAC,IAAD,CAAQC,IAAI,4HACVC,MAAM,OACNC,OAAO,QACPC,GAAG,OACHC,UAAU,cACVC,QAAQ,UACRC,SAAS,c,gCCXFC,EAAQ,uCAAG,WAAgBP,EAAKQ,GAArB,eAAAC,EAAA,+EAEGC,MAAMV,EAAK,CAChCW,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBJ,KAAMK,KAAKC,UAAUN,KAPH,WAEdO,EAFc,QASNC,GATM,sBAUZ,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,YAAgCH,EAASI,WAAzC,4BACKnB,IAXO,gCAabe,EAASK,QAbI,gCAepBC,MAAM,EAAD,IAfe,yDAAH,wDC2CNC,EAvCF,WAAO,IAAD,EACOC,mBAAS,oBADhB,mBACVC,EADU,KACJC,EADI,OAEOF,mBAAS,IAFhB,mBAEVG,EAFU,KAEJC,EAFI,KAIXC,EAAY,uCAAG,8BAAAnB,EAAA,6DACnBoB,QAAQC,IAAI,kCAAmCJ,GAEnC,8BACRlB,EAAO,CACTkB,KAAMA,GALW,SAOCnB,EAJR,8BAIsBC,GAPf,OASL,KAFRuB,EAPa,QAUjBN,EAAQ,oBACW,IAAVM,GACTN,EAAQ,wBAZS,2CAAH,qDAoBlB,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAEhB,4BAAKoB,GAEL,2BAAOO,MAAOL,EAAMM,SAAU,SAACC,GATnCN,EASsDM,EATxCC,OAAOH,QASqCI,cAAc,eAEpE,4BAAQC,QAAS,kBAAMR,MAAvB,qBCdOS,E,iLAdX,OACE,yBAAKjC,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,QAAQC,UAAWlB,IAC/B,kBAAC,IAAD,CAAOiB,KAAK,QAAQC,UAAWzC,W,GARzB0C,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d0d17bf3.chunk.js","sourcesContent":["import React from 'react'\nimport Iframe from 'react-iframe'\n\nconst Chat = () => {\n  return (\n    <Iframe url='https://www.kommunicate.io/test?appId=10d244c3bd3b842e5f18068c11b6ccd16&botIds=fulldaybot-3ygcj&assignee=fulldaybot-3ygcj'\n      width='100%'\n      height='800px'\n      id='myId'\n      className='myClassname'\n      display='initial'\n      position='relative' />\n  )\n}\n\nexport default Chat\n","export const postJson = async function (url, body) {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    })\n    if (!response.ok) {\n      throw new Error(`${response.status} ${response.statusText}\nFailed to POST ${url}`)\n    }\n    return response.json()\n  } catch (err) {\n    alert(err)\n  }\n}\n","import React, { useState } from 'react'\nimport './App.css'\nimport { postJson } from './utils'\n\nconst Spam = () => {\n  const [spam, setSpam] = useState('Spam or not spam')\n  const [text, setText] = useState('')\n\n  const checkForSpam = async () => {\n    console.log('checking for spam with the text', text)\n\n    const url = 'http://localhost:5000/model'\n    let body = {\n      text: text\n    }\n    const value = await postJson(url, body)\n\n    if (value === 0) {\n      setSpam('The text is spam')\n    } else if (value === 1) {\n      setSpam('The text is not spam')\n    }\n  }\n\n  const handleChange = (event) => {\n    setText(event.target.value)\n  }\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n\n        <h2>{spam}</h2>\n\n        <input value={text} onChange={(e) => handleChange(e)} onplaceholder='email text' />\n\n        <button onClick={() => checkForSpam()}>Check for spam</button>\n\n      </header>\n    </div>\n  )\n}\n\nexport default Spam\n","import React, { Component } from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Chat from './Chat'\nimport Spam from './Spam'\n\nclass App extends Component {\n  render () {\n    return (\n      <div className='App'>\n        <Router>\n          <div>\n            <Route exact path='/' component={Spam} />\n            <Route path='/spam' component={Spam} />\n            <Route path='/chat' component={Chat} />\n          </div>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}